#!/usr/bin/env python
 # -*- coding: UTF-8 -*-
__author__ = 'julenka'

from collections import defaultdict
"""
Triangle, square, pentagonal, hexagonal, heptagonal, and octagonal numbers are all figurate (polygonal) numbers and are
generated by the following formulae:

Triangle        P3,n=n(n+1)/2       1, 3, 6, 10, 15, ...
Square      P4,n=n2     1, 4, 9, 16, 25, ...
Pentagonal      P5,n=n(3n−1)/2      1, 5, 12, 22, 35, ...
Hexagonal       P6,n=n(2n−1)        1, 6, 15, 28, 45, ...
Heptagonal      P7,n=n(5n−3)/2      1, 7, 18, 34, 55, ...
Octagonal       P8,n=n(3n−2)        1, 8, 21, 40, 65, ...
The ordered set of three 4-digit numbers: 8128, 2882, 8281, has three interesting properties.

The set is cyclic, in that the last two digits of each number is the first two digits of the next number (including the last number with the first).
Each polygonal type: triangle (P3,127=8128), square (P4,91=8281), and pentagonal (P5,44=2882), is represented by a different number in the set.
This is the only set of 4-digit numbers with this property.
Find the sum of the only ordered set of six cyclic 4-digit numbers for which each polygonal type: triangle, square, pentagonal, hexagonal, heptagonal, and octagonal, is represented by a different number in the set.
"""
def sequence(max_value, proc):
    n = 1
    result = 0
    while(result < max_value):
        result = proc(n)
        yield result
        n += 1

def filter(lst, min):
    return [x for x in lst if x > min]

def getFirst2(n):
    return n / 100

def getLast2(n):
    return n % 100

MAX_VALUE = 10 ** 4
MIN_VALUE = 999

triangles = filter(sequence(MAX_VALUE, lambda n: (n * (n+1)) / 2 ), MIN_VALUE)
squares = filter(sequence(MAX_VALUE, lambda n: n ** 2), MIN_VALUE)
pentagonals = filter(sequence(MAX_VALUE, lambda n: (n * (3 * n - 1)) / 2), MIN_VALUE)
hexagonals = filter(sequence(MAX_VALUE, lambda n: n * (2 * n - 1)), MIN_VALUE)
heptagonals = filter(sequence(MAX_VALUE, lambda n: (n * (5 * n - 3)) / 2), MIN_VALUE)
octagonals = filter(sequence(MAX_VALUE, lambda n: n * (3 * n - 2)), MIN_VALUE)

all = [triangles, squares, pentagonals, hexagonals, heptagonals, octagonals]

# start with triangle number.

GOAL_LENGTH = 6
def helper(result, possible_sets):
    if len(result) == GOAL_LENGTH:
        return result
    cur_number = result[-1] if len(result) > 0 else None
    last_2 = getLast2(cur_number) if cur_number else None
    for i in possible_sets:
        possible_numbers = all[i]
        for n in possible_numbers:
            is_valid = cur_number is None or (getFirst2(n) == last_2)
            if is_valid and len(result) == GOAL_LENGTH - 1:
                is_valid = getLast2(n) == getFirst2(result[0])
            if is_valid:
                set2 = set(possible_sets)
                set2.remove(i)
                ret = helper(result + [n], set2)
                if ret:
                    return ret
    return None

r = helper([], set(range(6)))
print r, sum(r)

